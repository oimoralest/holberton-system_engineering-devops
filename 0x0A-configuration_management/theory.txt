0x0A Configuration management
    An Introduction to Configuration Management
        configuration management (CM) refers to the process of systematically
        handling changes to a system in a way that it maintains integrity over
        time.

        Automation is the mechanism used to make the server reach a desirable
        state, previously defined by provisioning scripts using a tool’s
        specific language and features (also refer to configuration management
        tools as Automation Tools or IT Automation Tools).

        Server Orchestration or IT Orchestration, since these tools are
        typically capable of managing one to hundreds of servers from a central
        controller machine.

        Benefits of Configuration Management for Servers
            Quick Provisioning of New Servers
                Whenever a new server needs to be deployed, a configuration
                management tool can automate most, if not all, of the
                provisioning process for you. Even with proper and thorough
                documentation, manually deploying a web server, for instance,
                could take hours compared to a few minutes with configuration
                management/automation.

            Quick Recovery from Critical Events
                When a server goes offline due to unknown circumstances, it
                might take several hours to properly audit the system and find
                out what really happened. In scenarios like this, deploying a
                replacement server is usually the safest way to get your
                services back online while a detailed inspection is done on the
                affected server. With configuration management and automation,
                this can be done in a quick and reliable way.

            No More Snowflake Servers
                At first glance, manual system administration may seem to be an
                easy way to deploy and quickly fix servers, but it often comes
                with a price. With time, it may become extremely difficult to
                know exactly what is installed on a server and which changes
                were made, when the process is not automated. Manual hotfixes,
                configuration tweaks, and software updates can turn servers into
                unique snowflakes, hard to manage and even harder to replicate.
                By using a configuration management tool, the procedure
                necessary for bringing up a new server or updating an existing
                one will be all documented in the provisioning scripts.

            Version Control for the Server Environment
                Once you have your server setup translated into a set of
                provisioning scripts, you will have the ability to apply to your
                server environment many of the tools and workflows you normally
                use for software source code.

                Version control tools, such as Git, can be used to keep track of
                changes made to the provisioning and to maintain separate
                branches for legacy versions of the scripts. You can also use
                version control to implement a code review policy for the
                provisioning scripts, where any changes should be submitted as a
                pull request and approved by a project lead before being
                accepted. This practice will add extra consistency to your
                infrastructure setup.

            Replicated Environments
                Configuration management makes it trivial to replicate
                environments with the exact same software and configurations.
                This enables you to effectively build a multistage ecosystem,
                with production, development, and testing servers. You can even
                use local virtual machines for development, built with the same
                provisioning scripts. This practice will minimize problems
                caused by environment discrepancies that frequently occur when
                applications are deployed to production or shared between
                co-workers with different machine setups (different operating
                system, software versions and/or configurations).

        Overview of Configuration Management Tools
            Most configuration management tools use a controller/master and
            node/agent model. Essentially, the controller directs the
            configuration of the nodes, based on a series of instructions or
            tasks defined in your provisioning scripts.

            Automation Framework
                Each CM tool provides a specific syntax and a set of features
                that you can use to write provisioning scripts.

            Idempotent Behavior
                Configuration management tools keep track of the state of
                resources in order to avoid repeating tasks that were executed
                before. If a package was already installed, the tool won’t try
                to install it again.

            System Facts
                Configuration management tools usually provide detailed
                information about the system being provisioned. This data is
                available through global variables, known as facts. They include
                things like network interfaces, IP addresses, operating system,
                and distribution.

            Templating System
                Most CM tools will provide a built-in templating system that can
                be used to facilitate setting up configuration files and
                services. Templates usually support variables, loops, and
                conditionals that can be used to maximise versatility. For
                instance, you can use a template to easily set up a new virtual
                host within Apache, while reusing the same template for multiple
                server installations. Instead of having only hard-coded, static
                values, a template should contain placeholders for values that
                can change from host to host, such as NameServer and
                DocumentRoot.

            Extensibility
                Even though provisioning scripts can be very specialized for the
                needs and demands of a particular server, there are many cases
                when you have similar server setups or parts of a setup that
                could be shared between multiple servers. Most provisioning
                tools will provide ways in which you can easily reuse and share
                smaller chunks of your provisioning setup as modules or plugins.

                Third-party modules and plugins are often easy to find on the
                Internet, specially for common server setups like installing a
                PHP web server. CM tools tend to have a strong community built
                around them and users are encouraged to share their custom
                extensions. Using extensions provided by other users can save
                you a lot of time, while also serving as an excellent way of
                learning how other users solved common problems using your tool
                of choice.

        Choosing a Configuration Management Tool
            There are many CM tools available in the market, each one with a
            different set of features and different complexity levels.

            There are a few things you should take into consideration before
            making a choice:

            Infrastructure Complexity
                Most configuration management tools require a minimum hierarchy
                consisting of a controller machine and a node that will be
                managed by it.

                Some tools can have more components and moving parts, which
                might increase the complexity of your infrastructure, impacting
                on the learning curve and possibly increasing the overall cost
                of implementation.

            Learning Curve
                CM tools provide a custom syntax, sometimes using a Domain
                Specific Language (DSL), and a set of features that comprise
                their framework for automation. As with conventional programming
                languages, some tools will demand a higher learning curve to be
                mastered. The infrastructure requirements might also influence
                the complexity of the tool and how quickly you will be able to
                see a return of investment.

            Cost
                Most CM tools offer free or open source versions, with paid
                subscriptions for advanced features and services. You should
                also consider training as a potential extra cost, not only in
                monetary terms, but also regarding the time that will be
                necessary to get your team up to speed with the tool you end up
                choosing.

            Advanced Tooling
                Most tools offer paid services that can include support,
                extensions, and advanced tooling. It’s important to analyse your
                specific needs, the size of your infrastructure and whether or
                not there is a need for using these services. Even if you don’t
                need such services just yet, consider the options for a possible
                future necessity.

            Community and Support
                A strong and welcoming community can be extremely resourceful
                for support and for documentation, since users are typically
                happy to share their knowledge and their extensions (modules,
                plugins, and provisioning scripts) with other users. This can be
                helpful to speed up your learning curve and avoid extra costs
                with paid support or training.

        Conclusion
            Configuration management can drastically improve the integrity of
            servers over time by providing a framework for automating processes
            and keeping track of changes made to the system environment.

    link: https://www.digitalocean.com/community/tutorials/an-introduction-to-configuration-management

    What is Puppet?
    Youtube: https://www.youtube.com/watch?v=llcjg1R0DdM

    Puppet resource type
    link: https://puppet.com/docs/puppet/3.8/type.html

    Puppet’s Declarative Language: Modeling Instead of Scripting
        When you go to your local Tesla dealership to order your new P85, you’re
        going to tell the fleet manager what features you want it to have: dual
        chargers, XM satellite radio, the mapping system, and those fancy red
        brake calipers. You’re not going to explain the steps the factory should
        use to build it, or how they should go about shipping it to the dealer.

        That’s the difference between a declarative language and a procedural
        language: You tell Puppet what you want the system to look like, not the
        steps to get there.

        The benefits of Puppet’s declarative language
            The Puppet DSL is tested. Thousands of people use Puppet modules,
            and they have, in effect, tested them for you.

            It’s repeatable. Once you run Puppet, you know the computer will be
            configured as it should be, in the state you’ve defined. And you can
            use a manifest to configure as many machines as you need, even on
            multiple platforms.

            Consistency. No matter what state your servers start in, once you
            run Puppet, they’ll end up exactly as you described. If you update
            your Puppet Apache module, every Apache machine managed by Puppet
            will update to the new configuration automatically. Your systems
            will throw fewer errors, and you’ll swear less.

            You save time. It’s much faster to run Puppet than to write a
            script. If a machine is accidentally configured incorrectly, Puppet
            will find the change and remediate it

            Self-documentation. Puppet manifests are so simple, anyone can read
            and understand them, including people outside your IT and
            engineering departments.

            Auditability. Many regulatory bodies accept Puppet manifests as
            proof of compliance. Whether it’s an external or internal audit,
            it’s great to have proof that you pass. And you can easily validate
            to your own executives that compliance requirements have been met.

            Puppet’s declarative language allows you to communicate the
            expected, desired state, not only to Puppet, but to the other humans
            on your team. It’s easy for you to write, and easy for others to
            read and understand...even your boss.
    link: https://puppet.com/blog/puppets-declarative-language-modeling-instead-of-scripting/
